openapi: 3.0.0
info:
  title: Todo API
  description: |
    **A simple Todo Application API.**

    Users are required to sign up and sign in to obtain a token. Once obtained, users should click the "Authorize" button and enter the token to gain access.

    This token is essential for performing CRUD operations on todos.

    Without a valid token, an "Access denied. No token provided." message will be displayed.


    Users can only manipulate their own todos.

    The application implements a role-based authorization system with the following details:

    - **GET /todos**: Accessible by users with the roles user or admin.

    - **POST /todos**: Accessible by users with the roles user or admin.

    - **PUT /todos/{id}**: Accessible by users with the roles user or admin.

    - **DELETE /todos/{id}**: Accessible only by users with the role admin.
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
    description: Local server

tags:
  - name: Users
    description: User management API
  - name: Todos
    description: The todo managing API

paths:
  /user/signup:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /user/signin:
    post:
      tags:
        - Users
      summary: User Signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
        '400':
          description: Invalid credentials

  /todos:
    get:
      tags:
        - Todos
      summary: Get all todos
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      tags:
        - Todos
      summary: Create a new todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the todo
                description:
                  type: string
                  description: The detailed description of the todo
                status:
                  type: string
                  description: The status of the todo (pending or completed)
      responses:
        '201':
          description: Todo created
        '400':
          description: Invalid input

  /todos/{id}:
    put:
      tags:
        - Todos
      summary: Update a todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the todo
                description:
                  type: string
                  description: The detailed description of the todo
                status:
                  type: string
                  description: The status of the todo (pending or completed)
      responses:
        '200':
          description: Todo updated
        '404':
          description: Todo not found
    delete:
      tags:
        - Todos
      summary: Delete a todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Todo deleted
        '404':
          description: Todo not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Bearer (apiKey)

        Enter your bearer token.
        
        Name: Authorization
        
        In: header

  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: string
          description: The auto-generated id of the user
        username:
          type: string
          description: The username of the user
        role:
          type: string
          enum:
            - user
            - admin
          description: The role of the user
          default: user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user

    Todo:
      type: object
      required:
        - title
        - description
        - status
        - userId
      properties:
        id:
          type: string
          description: The auto-generated id of the todo
        title:
          type: string
          description: The title of the todo
        description:
          type: string
          description: The detailed description of the todo
        status:
          type: string
          enum:
            - pending
            - completed
          description: The status of the todo (pending or completed)
          default: pending
        userId:
          type: string
          description: The id of the user who created the todo
        createdAt:
          type: string
          format: date-time
          description: The date the todo was created
        updatedAt:
          type: string
          format: date-time
          description: The date the todo was last updated

security:
  - bearerAuth: []
